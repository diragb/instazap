import { IgApiClientRealtime, MessageSyncMessage } from 'instagram_mqtt';
import { IgApiClient } from 'instagram-private-api';
import { StringIndexed } from '@slack/bolt/dist/types/helpers';
import { InstaZapOptions, MESSAGE_TYPE, StructuredMessage, VideoMessageBody } from './types';
import { App } from '@slack/bolt';
import { MEDIA_SHARE_MESSAGE } from './messageTypes';
export declare const getRandomNumberBetween: (min: number, max: number) => number;
export declare const facebookOta: (ig: IgApiClient) => Promise<any>;
export declare const executeRequestsFlow: ({ requests, concurrency, toShuffle }: {
    requests: (() => Promise<any>)[];
    concurrency?: number;
    toShuffle?: boolean;
}) => Promise<void>;
export declare const login: (ig: IgApiClient, username: string, password: string) => Promise<false | import("instagram-private-api").AccountRepositoryLoginResponseLogged_in_user>;
export declare const getInstagramHeaders: (ig: IgApiClientRealtime) => Promise<{
    'User-Agent': string;
    Accept: string;
    'Accept-Language': string;
    'X-Csrftoken': string | undefined;
    'X-IG-App-ID': string | undefined;
    'X-ASBD-ID': string;
    'X-IG-WWW-Claim': string;
    Origin: string;
    DNT: string;
    'Alt-Used': string;
    Connection: string;
    Referer: string;
    'Referrer-Policy': string;
    'sec-ch-ua': string;
    'sec-ch-ua-mobile': string;
    'sec-ch-ua-platform': string;
    'Sec-Fetch-Dest': string;
    'Sec-Fetch-Mode': string;
    'Sec-Fetch-Site': string;
    'Sec-GPC': string;
    Cookie: string;
    Server?: import("axios").AxiosHeaderValue;
    "Content-Type"?: import("axios").AxiosHeaderValue;
    "Content-Length"?: import("axios").AxiosHeaderValue;
    "Cache-Control"?: import("axios").AxiosHeaderValue;
    "Content-Encoding"?: import("axios").AxiosHeaderValue;
    "set-cookie"?: string[];
} | {
    'User-Agent': string;
    Accept: string;
    'Accept-Language': string;
    'X-Csrftoken': string | undefined;
    'X-IG-App-ID': string | undefined;
    'X-ASBD-ID': string;
    'X-IG-WWW-Claim': string;
    Origin: string;
    DNT: string;
    'Alt-Used': string;
    Connection: string;
    Referer: string;
    'Referrer-Policy': string;
    'sec-ch-ua': string;
    'sec-ch-ua-mobile': string;
    'sec-ch-ua-platform': string;
    'Sec-Fetch-Dest': string;
    'Sec-Fetch-Mode': string;
    'Sec-Fetch-Site': string;
    'Sec-GPC': string;
    Cookie: string;
    Server?: import("axios").AxiosHeaderValue;
    "Content-Type"?: import("axios").AxiosHeaderValue;
    "Content-Length"?: import("axios").AxiosHeaderValue;
    "Cache-Control"?: import("axios").AxiosHeaderValue;
    "Content-Encoding"?: import("axios").AxiosHeaderValue;
    "set-cookie"?: string[];
}>;
export declare const getLargestCandidate: (candidates: any[], options?: InstaZapOptions) => any;
export declare const handlePostVideo: (media: any, options?: InstaZapOptions) => {
    type: MESSAGE_TYPE.POST_VIDEO;
    body: VideoMessageBody;
};
export declare const handleMediaShare: (ig: IgApiClientRealtime, message: MEDIA_SHARE_MESSAGE, options?: InstaZapOptions) => Promise<StructuredMessage>;
export declare const handleStoryShare: (message: any, options?: InstaZapOptions) => Promise<StructuredMessage>;
export declare const getStructuredMessage: (ig: IgApiClientRealtime, message: MessageSyncMessage, options?: InstaZapOptions) => Promise<StructuredMessage>;
export declare const isPhoto: (type: MESSAGE_TYPE) => boolean;
export declare const isVideo: (type: MESSAGE_TYPE) => boolean;
export declare const uploadPhoto: (slack: App<StringIndexed>, URL: string, channel: string, options: InstaZapOptions) => Promise<void>;
export declare const uploadVideo: (slack: App<StringIndexed>, URL: string, channel: string, options: InstaZapOptions) => Promise<void>;
export declare const connectToRealtime: (ig: IgApiClientRealtime, reconnectionIteration?: number, attemptReconnections?: boolean) => Promise<boolean>;
export declare const attemptReconnection: (ig: IgApiClientRealtime) => Promise<boolean>;
export declare const markAsSeen: (ig: IgApiClientRealtime, message: MessageSyncMessage) => Promise<void>;
export declare const handleNewMessages: (ig: IgApiClientRealtime, slack: App<StringIndexed>, message: MessageSyncMessage, options: InstaZapOptions) => Promise<void>;
export declare const simulateRandomSleep: (ig: IgApiClientRealtime, timeToSleep: number, timeToWake: number) => void;
export declare const createRandomSleep: (ig: IgApiClientRealtime, options: InstaZapOptions) => void;
export declare const startRandomSleepService: (ig: IgApiClientRealtime, options: InstaZapOptions) => void;
//# sourceMappingURL=utils.d.ts.map